# -*- coding: utf-8 -*-
"""data-analysis-predict-in-mental-health-data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6JWD9f64wJ-34-irPTW2Sp14LvvULYB
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import pandas as pd
import numpy as np
from scipy import stats
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
!pip3 install catboost
from catboost import CatBoostClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder



from sklearn.metrics import classification_report,confusion_matrix, roc_auc_score, accuracy_score, confusion_matrix, roc_curve

import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

"""# **1-Load Data**"""

df = pd.read_csv('train.csv')
df.head(10)

test = pd.read_csv('test.csv')
test.head(10)

df.info()

test.info()

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

"""# **2-Analisis de datos y valores faltantes**

## **2-1-Columna de profesion**
"""

df.loc[df['Profession'].isnull()].head(10)

df.loc[df['Profession'].notnull()].head(10)

test[['Working Professional or Student', 'Profession']]

df_1 = df[['Working Professional or Student', 'Profession']]
df_1.head()

print(len(df_1.loc[(df_1['Working Professional or Student']=='Student')&(df_1['Profession']=='Student')]))
print(df_1.loc[(df_1['Working Professional or Student']=='Student')&(df_1['Profession']=='Student')])

ind = df.loc[(df['Working Professional or Student']=='Student') & (df['Profession'].isnull())].index
for i in ind:
    df.loc[i, 'Profession'] = 'Student'

ind = test.loc[(test['Working Professional or Student']=='Student') & (test['Profession'].isnull())].index
for i in ind:
    test.loc[i, 'Profession'] = 'Student'

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

df.loc[df['Profession'].isnull()][['Working Professional or Student', 'Profession']]

df.loc[df['Profession'].isnull()][['Degree', 'Profession']]

df_2 = df.loc[df['Profession'].isnull()][['Degree', 'Profession']]
df_2.head()

plt.figure(figsize=(12, 6))
sns.histplot(df_2['Degree'])
plt.xticks(rotation=90)

df.head()

df.loc[(df['Profession']=='Class 12')]

def plot_data(name, data):
    plt.figure(figsize=(20, 15))
    palette_color = sns.color_palette('pastel')
    explode = [0.1 for _ in range(data.nunique())]

    target_counts = df.groupby(name)[name].count()

    target_counts.plot.pie(
    colors=palette_color,
    explode=explode,
    autopct="%1.1f%%",
    shadow=True,
    startangle=140,
    textprops={'fontsize': 14},
    wedgeprops={'edgecolor': 'black', 'linewidth': 1.5}
    )

    plt.title(name, fontsize=18, weight='bold')
    plt.axis('equal')
    plt.show()

plot_data('Profession', df['Profession'])

Profession_name = df['Profession'].unique()
Profession_name

ind = df.loc[(df['Degree']=='Class 12') & (df['Profession'].isnull())].index
for i in ind:
    df.loc[i, 'Profession'] = 'Class 12'

test_Profession_name = test['Profession'].unique()
test_Profession_name

ind = test.loc[(test['Degree']=='Class 12') & (test['Profession'].isnull())].index
for i in ind:
    test.loc[i, 'Profession'] = 'Class 12'

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

df.loc[df['Profession'].isnull()]

df_2 = df.loc[df['Profession'].isnull()][['Age', 'Profession']]
df_2.head()

sns.kdeplot(data=df_2['Age'], shade=True)

df.dropna(subset='Profession',inplace=True)

#test.dropna(subset='Profession',inplace=True)

missing_values_count = df.isnull().sum()
missing_values_count

"""## **2-2-Columna de presion academica**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I checked the relationship of column "Academic Pressure" with other columns
    </font>
</div>
"""

Profession_name = df['Profession'].unique()
Profession_name

test_Profession_name = test['Profession'].unique()
test_Profession_name

for i in Profession_name:
    x = df.loc[(df['Profession']==i) & (df['Academic Pressure'].notnull())]['Academic Pressure'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Profession']==i].index
        for j in ind:
            df.loc[j, 'Academic Pressure'] = x

for i in test_Profession_name:
    x = test.loc[(test['Profession']==i) & (test['Academic Pressure'].notnull())]['Academic Pressure'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Profession']==i].index
        for j in ind:
            test.loc[j, 'Academic Pressure'] = x

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

df.loc[df['Academic Pressure'].isnull()]

test.loc[test['Academic Pressure'].isnull()]

df_2 = df.loc[df['Academic Pressure'].isnull()][['Profession']]
df_2.head()

df_3 = test.loc[test['Academic Pressure'].isnull()][['Profession']]
df_3.head()

fig, axes = plt.subplots(1, 2, sharex=True, figsize=(20,5))

sns.histplot(df_2['Profession'], ax=axes[0]);
plt.xticks(rotation=90)
sns.histplot(df_3['Profession'], ax=axes[1]);
plt.xticks(rotation=90);

print('Profession Train Len: ',len(Profession_name))
print('Profession Test Len: ',len(test_Profession_name))

Profession_test = df_2['Profession'].unique()
test_Profession_test = df_3['Profession'].unique()

print('Profession Train Len: ',len(Profession_test))
print('Profession Test Len: ',len(test_Profession_test))

array_Profession_train = []
for i in Profession_test:
    x = df_2.loc[df_2['Profession']==i]
    if len(x)>=1:
        array_Profession_train.append(i)

array_Profession_test = []
for i in test_Profession_test:
    x = df_3.loc[df_3['Profession']==i]
    if len(x)>=1:
        array_Profession_test.append(i)

for i in array_Profession_test:
    x = df.loc[df['Profession']==i][['Academic Pressure']].mode()
    if len(x)!=0:
        print(i, x)

test_Profession = {
    'Educational Consultant' : 3,
    'Digital Marketer': 5,
    'Lawyer': 4,
    'Architect' : 3,

}

for name, value in test_Profession.items():
    ind = test.loc[test['Profession']==name].index
    for i in ind:
        test.loc[i, 'Academic Pressure'] = value

missing_values_count = test.isnull().sum()
missing_values_count

for i in array_Profession_train:
    x = test.loc[test['Profession']==i][['Academic Pressure']].mode()
    if len(x)!=0:
        print(i, x)

train_Profession = {
    'Chemist' : 3,
    'Electrician': 1,
    'Data Scientist': 4,
    'HR Manager' : 5,
    'Judge' : 4,
    'Researcher': 3,
    'Graphic Designer': 4,

}

for name, value in train_Profession.items():
    ind = df.loc[df['Profession']==name].index
    for i in ind:
        df.loc[i, 'Academic Pressure'] = value

missing_values_count = df.isnull().sum()
missing_values_count

df_2 = df.loc[df['Academic Pressure'].isnull()][['Profession']]
df_2.head()

df_3 = test.loc[test['Academic Pressure'].isnull()][['Profession']]
df_3.head()

fig, axes = plt.subplots(1, 2, sharex=True, figsize=(20,5))

sns.histplot(df_2['Profession'], ax=axes[0]);
plt.xticks(rotation=90);
sns.histplot(df_3['Profession'], ax=axes[1]);
plt.xticks(rotation=90);

array_Profession_train = []
array_Profession_test = []

for i in Profession_test:
    x = df_2.loc[df_2['Profession']==i]
    if len(x)>=1:
        array_Profession_train.append(i)

for i in test_Profession_test:
    x = df_3.loc[df_3['Profession']==i]
    if len(x)>=1:
        array_Profession_test.append(i)

array_Profession_train = []
for i in Profession_test:
    x = df_2.loc[df_2['Profession']==i]
    if len(x)>=200:
        array_Profession_train.append(i)

array_Profession_test = []
for i in test_Profession_test:
    x = df_3.loc[df_3['Profession']==i]
    if len(x)>=200:
        array_Profession_test.append(i)

array_Profession_train

array_Profession_test

Profession_name = df['Profession'].unique()
Profession_name

df.loc[df['Academic Pressure'].isnull()]

df_4 = df.loc[df['Academic Pressure'].isnull()][['Degree']]
df_4.head()

figsize=(30,20)
sns.histplot(data = df_4,y='Degree');

df.loc[(df['Degree']=='BHM') & (df['Working Professional or Student']=='Working Professional')& (df['Academic Pressure'].notnull())][['Academic Pressure']].mode()

Academic_Pressure = {
    'BBA' : 3,
    'MCA': 3,
    'BSc': 3,
    'BE' : 3,
    'MA' : 5,
    'B.Com': 5,
    'BA': 5,
    'PhD': 3,
    'B.Tech': 4,
    'MHM': 2,
    'ME': 5,
    'BCA': 3,
    'MSc': 3,
    'M.Com': 3,
    'MBA': 3,
    'M.Tech': 3,
    'BHM': 2,
}

for name, value in Academic_Pressure.items():
    ind = df.loc[(df['Degree']==name) & (df['Working Professional or Student']=='Working Professional')& (df['Academic Pressure'].isnull())].index
    for i in ind:
        df.loc[i, 'Academic Pressure'] = value

for name, value in Academic_Pressure.items():
    ind = test.loc[(test['Degree']==name) & (test['Working Professional or Student']=='Working Professional')& (test['Academic Pressure'].isnull())].index
    for i in ind:
        test.loc[i, 'Academic Pressure'] = value

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

df.dropna(subset='Academic Pressure',inplace=True)
#test.dropna(subset='Academic Pressure',inplace=True)

"""## **2-3-Columna de satisfacción con el estudio**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I checked the relationship of column "Study Satisfaction" with other columns
    </font>
</div>
"""

df.head(10)

df.groupby('Study Satisfaction').groups

Profession_name = df['Profession'].unique()
Profession_name

test_Profession_name = test['Profession'].unique()
test_Profession_name

for i in test_Profession_name:
    x = test.loc[(test['Profession']==i) & (test['Study Satisfaction'].notnull())]['Study Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Profession']==i].index
        for j in ind:
            test.loc[j, 'Study Satisfaction'] = x

for i in Profession_name:
    x = df.loc[(df['Profession']==i) & (df['Study Satisfaction'].notnull())]['Study Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Profession']==i].index
        for j in ind:
            df.loc[j, 'Study Satisfaction'] = x

missing_values_count = test.isnull().sum()
missing_values_count

df.head()

print(len(df.loc[(df['Study Satisfaction'].isnull()) & (df['Working Professional or Student']=='Working Professional')][['Study Satisfaction']]))
print(len(df.loc[(df['Study Satisfaction'].isnull()) & (df['Working Professional or Student']=='Student')][['Study Satisfaction']]))

print(len(df.loc[(df['Study Satisfaction'].notnull()) & (df['Profession']=='Teacher')][['Study Satisfaction']]))
print(len(df.loc[(df['Study Satisfaction'].isnull()) & (df['Profession']=='Teacher')][['Study Satisfaction']]))

Degree_name = df['Degree'].unique()
Degree_name

for i in Degree_name:
    x = len(df.loc[(df['Study Satisfaction'].notnull()) & (df['Degree']==i)][['Study Satisfaction']])
    y = len(df.loc[(df['Study Satisfaction'].isnull()) & (df['Degree']==i)][['Study Satisfaction']])
    print(i, 'notnull: ', x, 'isnull: ', y)

for i in Degree_name:
    x = df.loc[(df['Degree']==i) & (df['Study Satisfaction'].notnull())]['Study Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Degree']==i].index
        for j in ind:
            df.loc[j, 'Study Satisfaction'] = x

missing_values_count = df.isnull().sum()
missing_values_count

test_Degree_name = test['Degree'].unique()
test_Degree_name

for i in test_Degree_name:
    x = len(test.loc[(test['Study Satisfaction'].notnull()) & (test['Degree']==i)][['Study Satisfaction']])
    y = len(test.loc[(test['Study Satisfaction'].isnull()) & (test['Degree']==i)][['Study Satisfaction']])
    print(i, 'notnull: ', x, 'isnull: ', y)

for i in test_Degree_name:
    x = test.loc[(test['Degree']==i) & (test['Study Satisfaction'].notnull())]['Study Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Degree']==i].index
        for j in ind:
            test.loc[j, 'Study Satisfaction'] = x

missing_values_count = test.isnull().sum()
missing_values_count

df.dropna(subset='Study Satisfaction',inplace=True)
#test.dropna(subset='Study Satisfaction',inplace=True)

"""## **2-4-Columna de presion laboral**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I checked the relationship of column "Work Pressure" with other columns
    </font>
</div>
"""

df.head(10)

Profession_name = df['Profession'].unique()
Profession_name

for i in Profession_name:
    x = len(df.loc[(df['Work Pressure'].notnull()) & (df['Profession']==i)][['Work Pressure']])
    y = len(df.loc[(df['Work Pressure'].isnull()) & (df['Profession']==i)][['Work Pressure']])
    print(i, 'notnull: ', x, 'isnull: ', y)

for i in Profession_name:
    x = df.loc[(df['Profession']==i) & (df['Work Pressure'].notnull())]['Work Pressure'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Profession']==i].index
        for j in ind:
            df.loc[j, 'Work Pressure'] = x

missing_values_count = df.isnull().sum()
missing_values_count

test_Profession_name = test['Profession'].unique()
test_Profession_name

for i in test_Profession_name:
    x = test.loc[(test['Profession']==i) & (test['Work Pressure'].notnull())]['Work Pressure'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Profession']==i].index
        for j in ind:
            test.loc[j, 'Work Pressure'] = x

missing_values_count = test.isnull().sum()
missing_values_count

df.dropna(subset='Work Pressure',inplace=True)
#test.dropna(subset='Work Pressure',inplace=True)

"""## **2-5-Columna de satisfacción laboral**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I checked the relationship of column "Job Satisfaction" with other columns
    </font>
</div>
"""

df.head(10)

print('Working Professional & Job Satisfaction = isnaull :',len(df.loc[(df['Job Satisfaction'].isnull()) & (df['Working Professional or Student']=='Working Professional')][['Job Satisfaction']]))
print('Working Professional & Job Satisfaction = notnaull :',len(df.loc[(df['Job Satisfaction'].notnull()) & (df['Working Professional or Student']=='Working Professional')][['Job Satisfaction']]))

print('Student & Job Satisfaction = isnaull :',len(df.loc[(df['Job Satisfaction'].isnull()) & (df['Working Professional or Student']=='Student')][['Job Satisfaction']]))
print('Student & Job Satisfaction = notnaull :',len(df.loc[(df['Job Satisfaction'].notnull()) & (df['Working Professional or Student']=='Student')][['Job Satisfaction']]))

for i in Degree_name:
    x = len(df.loc[(df['Job Satisfaction'].notnull()) & (df['Degree']==i) & (df['Working Professional or Student']=='Working Professional')][['Job Satisfaction']])
    y = len(df.loc[(df['Job Satisfaction'].isnull()) & (df['Degree']==i) & (df['Working Professional or Student']=='Working Professional')][['Job Satisfaction']])
    print(i, 'notnull: ', x, 'isnull: ', y)

for i in Degree_name:
    x = df.loc[(df['Degree']==i) & (df['Job Satisfaction'].notnull()) & (df['Working Professional or Student']=='Working Professional')]['Job Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Degree']==i].index
        for j in ind:
            df.loc[j, 'Job Satisfaction'] = x

for i in Degree_name:
    x = df.loc[(df['Degree']==i) & (df['Job Satisfaction'].notnull()) & (df['Working Professional or Student']=='Student')]['Job Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = df.loc[df['Degree']==i].index
        for j in ind:
            df.loc[j, 'Job Satisfaction'] = x

missing_values_count = df.isnull().sum()
missing_values_count

test_Degree_name = test['Degree'].unique()
test_Degree_name

for i in test_Degree_name:
    x = test.loc[(test['Degree']==i) & (test['Job Satisfaction'].notnull()) & (test['Working Professional or Student']=='Working Professional')]['Job Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Degree']==i].index
        for j in ind:
            test.loc[j, 'Job Satisfaction'] = x

for i in test_Degree_name:
    x = test.loc[(test['Degree']==i) & (test['Job Satisfaction'].notnull()) & (test['Working Professional or Student']=='Student')]['Job Satisfaction'].mode()
    if len(x)!=0:
        x = int(x[0])
        ind = test.loc[test['Degree']==i].index
        for j in ind:
            test.loc[j, 'Job Satisfaction'] = x

missing_values_count = test.isnull().sum()
missing_values_count

df.dropna(subset='Job Satisfaction',inplace=True)
#test.dropna(subset='Job Satisfaction',inplace=True)

"""## **2-6-Columna de promedio de calificaciones**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I checked the relationship of column "CGPA" with other columns
    </font>
</div>
"""

df.head(10)

print('Working Professional & CGPA = isnaull :',len(df.loc[(df['CGPA'].isnull()) & (df['Working Professional or Student']=='Working Professional')][['CGPA']]))
print('Working Professional & CGPA = notnaull :',len(df.loc[(df['CGPA'].notnull()) & (df['Working Professional or Student']=='Working Professional')][['CGPA']]))

print('Student & CGPA = isnaull :',len(df.loc[(df['CGPA'].isnull()) & (df['Working Professional or Student']=='Student')][['CGPA']]))
print('Student & CGPA = notnaull :',len(df.loc[(df['CGPA'].notnull()) & (df['Working Professional or Student']=='Student')][['CGPA']]))

df.loc[(df['CGPA'].notnull()) & (df['Working Professional or Student']=='Working Professional')][['CGPA']]

df.loc[(df['CGPA'].notnull()) & (df['Working Professional or Student']=='Student')][['CGPA']].head()

plot_data('Working Professional or Student', df['Working Professional or Student'])

"""## **2-7-Duracion del sueño**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I normalized the "Sleep Duration" column values
    </font>
</div>
"""

figsize=(20,10)
sns.histplot(data = df ,y='Sleep Duration');

figsize=(20,10)
sns.histplot(data = test ,y='Sleep Duration');

figsize=(20,10)
plot_data('Sleep Duration', df['Sleep Duration'])

df['Sleep Duration'].unique()

Sleep_Duration = {'More than 8 hours':0, 'Less than 5 hours':1, '5-6 hours':2, '7-8 hours':3}

df['Sleep Duration'] = df['Sleep Duration'].map(Sleep_Duration)
test['Sleep Duration'] = test['Sleep Duration'].map(Sleep_Duration)

"""## **Habitos de dieta**

<div style="background-color: green; padding: 20px; border-radius: 25px; ">
<font color='white' size="5px">
I normalized the "Dietary Habits" column values
    </font>
</div>
"""

df.head(10)

figsize=(20,10)
sns.histplot(data = df ,y='Dietary Habits');

figsize=(20,10)
sns.histplot(data = test ,y='Dietary Habits');

df['Dietary Habits'].unique()

Dietary_Habits = {'Unhealthy':0, 'Moderate':1, 'Healthy':2}

df['Dietary Habits'] = df['Dietary Habits'].map(Dietary_Habits)
test['Dietary Habits'] = test['Dietary Habits'].map(Dietary_Habits)

missing_values_count = test.isnull().sum()
missing_values_count

test[['Dietary Habits']] = test[['Dietary Habits']].fillna(value=0)
test[['Sleep Duration']] = test[['Sleep Duration']].fillna(value=0)

missing_values_count = test.isnull().sum()
missing_values_count

df.dropna(subset=['Sleep Duration', 'Dietary Habits', 'Financial Stress'],inplace=True)
#test.dropna(subset=['Sleep Duration', 'Dietary Habits', 'Financial Stress'],inplace=True)

missing_values_count = df.isnull().sum()
missing_values_count

missing_values_count = test.isnull().sum()
missing_values_count

#test.dropna(subset='Degree',inplace=True)

df.head(10)

df.info()

plot_data('Gender', df['Gender'])